"""
–°–µ—Ä–≤–∏—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–î–∏–∞–ª–æ–≥–æ–≤.
"""
from typing import List, Optional, Dict, Any

from app.models.yandex_models import (
    YandexResponse, 
    YandexButton, 
    YandexCard,
    YandexIntent,
    YandexZodiacSign
)


class ResponseFormatter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ê–ª–∏—Å—ã."""
    
    def __init__(self):
        self.welcome_messages = [
            "–ü—Ä–∏–≤–µ—Ç! –Ø –∞—Å—Ç—Ä–æ–ª–æ–≥ –ê–ª–∏—Å—ã. –Ø –º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø, —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∑–Ω–∞–∫–æ–≤ –∏–ª–∏ –¥–∞—Ç—å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç.",
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê—Å—Ç—Ä–æ–ª–æ–≥. –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –≥–æ—Ä–æ—Å–∫–æ–ø–∞–º–∏, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é –∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏.",
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –ì–æ—Ç–æ–≤ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º—É–¥—Ä–æ—Å—Ç—å—é –∑–≤—ë–∑–¥!"
        ]
        
        self.help_buttons = [
            YandexButton(title="–ì–æ—Ä–æ—Å–∫–æ–ø", payload={"action": "horoscope"}),
            YandexButton(title="–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", payload={"action": "compatibility"}),
            YandexButton(title="–°–æ–≤–µ—Ç –¥–Ω—è", payload={"action": "advice"}),
            YandexButton(title="–ü–æ–º–æ—â—å", payload={"action": "help"})
        ]

    def format_welcome_response(self, is_returning_user: bool = False) -> YandexResponse:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        if is_returning_user:
            text = "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Å–µ–≥–æ–¥–Ω—è?"
        else:
            text = self.welcome_messages[0]
        
        return YandexResponse(
            text=text,
            tts=self._add_tts_pauses(text),
            buttons=self.help_buttons,
            end_session=False
        )

    def format_horoscope_request_response(
        self, 
        has_birth_date: bool = False
    ) -> YandexResponse:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞."""
        if not has_birth_date:
            text = "–î–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –º–Ω–µ –Ω—É–∂–Ω–∞ –≤–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è. –ù–∞–∑–æ–≤–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–µ–Ω—å, –º–µ—Å—è—Ü –∏ –≥–æ–¥."
        else:
            text = "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø."
        
        buttons = [
            YandexButton(title="–ù–µ –∑–Ω–∞—é –≤—Ä–µ–º—è", payload={"action": "no_time"}),
            YandexButton(title="–ù–∞–∑–∞–¥", payload={"action": "back"})
        ]
        
        return YandexResponse(
            text=text,
            tts=self._add_tts_pauses(text),
            buttons=buttons if has_birth_date else None,
            end_session=False
        )

    def format_compatibility_request_response(
        self, 
        step: int = 1
    ) -> YandexResponse:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""
        if step == 1:
            text = "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω–∞–∑–æ–≤–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞."
            buttons = self._get_zodiac_buttons()
        else:
            text = "–¢–µ–ø–µ—Ä—å –Ω–∞–∑–æ–≤–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞."
            buttons = self._get_zodiac_buttons()
        
        return YandexResponse(
            text=text,
            tts=self._add_tts_pauses(text),
            buttons=buttons,
            end_session=False
        )

    def format_horoscope_response(
        self, 
        zodiac_sign: YandexZodiacSign,
        period: str = "–¥–µ–Ω—å"
    ) -> YandexResponse:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –≥–æ—Ä–æ—Å–∫–æ–ø–æ–º."""
        horoscope_text = self._generate_horoscope_text(zodiac_sign, period)
        
        text = f"–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {zodiac_sign.value} –Ω–∞ {period}:\n\n{horoscope_text}"
        
        buttons = [
            YandexButton(title="–î—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥", payload={"action": "change_period"}),
            YandexButton(title="–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", payload={"action": "compatibility"}),
            YandexButton(title="–°–æ–≤–µ—Ç –¥–Ω—è", payload={"action": "advice"})
        ]
        
        return YandexResponse(
            text=text,
            tts=self._add_tts_pauses(text),
            buttons=buttons,
            end_session=False
        )

    def format_compatibility_response(
        self, 
        sign1: YandexZodiacSign,
        sign2: YandexZodiacSign
    ) -> YandexResponse:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∑–Ω–∞–∫–æ–≤."""
        compatibility_text = self._generate_compatibility_text(sign1, sign2)
        
        text = f"–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å {sign1.value} –∏ {sign2.value}:\n\n{compatibility_text}"
        
        buttons = [
            YandexButton(title="–î—Ä—É–≥–∞—è –ø–∞—Ä–∞", payload={"action": "new_compatibility"}),
            YandexButton(title="–ì–æ—Ä–æ—Å–∫–æ–ø", payload={"action": "horoscope"}),
            YandexButton(title="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", payload={"action": "main_menu"})
        ]
        
        return YandexResponse(
            text=text,
            tts=self._add_tts_pauses(text),
            buttons=buttons,
            end_session=False
        )

    def format_advice_response(self) -> YandexResponse:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç."""
        advice_text = self._generate_advice_text()
        
        text = f"–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –¥–Ω—è:\n\n{advice_text}"
        
        buttons = [
            YandexButton(title="–ù–æ–≤—ã–π —Å–æ–≤–µ—Ç", payload={"action": "new_advice"}),
            YandexButton(title="–ì–æ—Ä–æ—Å–∫–æ–ø", payload={"action": "horoscope"}),
            YandexButton(title="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", payload={"action": "main_menu"})
        ]
        
        return YandexResponse(
            text=text,
            tts=self._add_tts_pauses(text),
            buttons=buttons,
            end_session=False
        )

    def format_help_response(self) -> YandexResponse:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
        text = """–Ø —É–º–µ—é:

üåü –°–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã –Ω–∞ –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—é –∏–ª–∏ –º–µ—Å—è—Ü
üíë –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞  
üîÆ –î–∞–≤–∞—Ç—å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
üåô –†–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ –≤–ª–∏—è–Ω–∏–∏ –ª—É–Ω–Ω—ã—Ö —Ñ–∞–∑

–ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é."""
        
        return YandexResponse(
            text=text,
            tts=self._add_tts_pauses(text),
            buttons=self.help_buttons,
            end_session=False
        )

    def format_error_response(
        self, 
        error_type: str = "general"
    ) -> YandexResponse:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ."""
        error_messages = {
            "general": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            "invalid_date": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞–∑–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¥–µ–Ω—å, –º–µ—Å—è—Ü, –≥–æ–¥.",
            "invalid_sign": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            "no_data": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
        }
        
        text = error_messages.get(error_type, error_messages["general"])
        
        return YandexResponse(
            text=text,
            tts=text,
            buttons=self.help_buttons,
            end_session=False
        )

    def format_goodbye_response(self) -> YandexResponse:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        text = "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ü—É—Å—Ç—å –∑–≤—ë–∑–¥—ã –≤–µ–¥—É—Ç –≤–∞—Å –∫ —Å—á–∞—Å—Ç—å—é!"
        
        return YandexResponse(
            text=text,
            tts=text,
            end_session=True
        )

    def _get_zodiac_buttons(self) -> List[YandexButton]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ –∑–Ω–∞–∫–∞–º–∏ –∑–æ–¥–∏–∞–∫–∞."""
        return [
            YandexButton(title="–û–≤–µ–Ω", payload={"sign": "–æ–≤–µ–Ω"}),
            YandexButton(title="–¢–µ–ª–µ—Ü", payload={"sign": "—Ç–µ–ª–µ—Ü"}),
            YandexButton(title="–ë–ª–∏–∑–Ω–µ—Ü—ã", payload={"sign": "–±–ª–∏–∑–Ω–µ—Ü—ã"}),
            YandexButton(title="–†–∞–∫", payload={"sign": "—Ä–∞–∫"}),
            YandexButton(title="–õ–µ–≤", payload={"sign": "–ª–µ–≤"}),
            YandexButton(title="–î–µ–≤–∞", payload={"sign": "–¥–µ–≤–∞"}),
        ]

    def _add_tts_pauses(self, text: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–∞—É–∑—ã –≤ TTS."""
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ –ø–∞—É–∑—ã –ø–æ—Å–ª–µ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        tts = text.replace(".", ". <pause=300ms>")
        tts = tts.replace("!", "! <pause=300ms>")
        tts = tts.replace("?", "? <pause=300ms>")
        tts = tts.replace(":", ": <pause=200ms>")
        tts = tts.replace(";", "; <pause=200ms>")
        return tts

    def _generate_horoscope_text(
        self, 
        zodiac_sign: YandexZodiacSign,
        period: str
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–∞ (–∑–∞–≥–ª—É—à–∫–∞)."""
        horoscopes = {
            YandexZodiacSign.ARIES: "–°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π. –≠–Ω–µ—Ä–≥–∏—è –ú–∞—Ä—Å–∞ –¥–∞—ë—Ç –≤–∞–º —Å–∏–ª—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π.",
            YandexZodiacSign.TAURUS: "–í–µ–Ω–µ—Ä–∞ –±–ª–∞–≥–æ–≤–æ–ª–∏—Ç –≤–∞–º –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö –∫—Ä–∞—Å–æ—Ç—ã –∏ –≥–∞—Ä–º–æ–Ω–∏–∏. –û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞.",
            YandexZodiacSign.GEMINI: "–ú–µ—Ä–∫—É—Ä–∏–π –∞–∫—Ç–∏–≤–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–µ –æ–±—â–µ–Ω–∏–µ. –°–µ–≥–æ–¥–Ω—è –º–æ–≥—É—Ç –ø—Ä–∏–π—Ç–∏ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏.",
            # –î–æ–±–∞–≤–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏ –ø–æ –º–µ—Ä–µ —Ä–∞–∑–≤–∏—Ç–∏—è
        }
        
        return horoscopes.get(
            zodiac_sign, 
            "–ó–≤—ë–∑–¥—ã —Å–æ–≤–µ—Ç—É—é—Ç –≤–∞–º –±—ã—Ç—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–º –∫ –¥–µ—Ç–∞–ª—è–º –∏ —Å–ª—É—à–∞—Ç—å —Å–≤–æ—é –∏–Ω—Ç—É–∏—Ü–∏—é."
        )

    def _generate_compatibility_text(
        self, 
        sign1: YandexZodiacSign,
        sign2: YandexZodiacSign
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–∑–∞–≥–ª—É—à–∫–∞)."""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ —Å—Ç–∏—Ö–∏—è–º
        fire_signs = [YandexZodiacSign.ARIES, YandexZodiacSign.LEO, YandexZodiacSign.SAGITTARIUS]
        earth_signs = [YandexZodiacSign.TAURUS, YandexZodiacSign.VIRGO, YandexZodiacSign.CAPRICORN]
        air_signs = [YandexZodiacSign.GEMINI, YandexZodiacSign.LIBRA, YandexZodiacSign.AQUARIUS]
        water_signs = [YandexZodiacSign.CANCER, YandexZodiacSign.SCORPIO, YandexZodiacSign.PISCES]
        
        def get_element(sign):
            if sign in fire_signs:
                return "fire"
            elif sign in earth_signs:
                return "earth"
            elif sign in air_signs:
                return "air"
            else:
                return "water"
        
        element1 = get_element(sign1)
        element2 = get_element(sign2)
        
        if element1 == element2:
            return "–û—Ç–ª–∏—á–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å! –í—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ —Å –ø–æ–ª—É—Å–ª–æ–≤–∞."
        elif (element1 in ["fire", "air"] and element2 in ["fire", "air"]) or \
             (element1 in ["earth", "water"] and element2 in ["earth", "water"]):
            return "–•–æ—Ä–æ—à–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å. –£ –≤–∞—Å –º–Ω–æ–≥–æ –æ–±—â–µ–≥–æ, –Ω–æ –µ—Å—Ç—å –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è."
        else:
            return "–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏—Ç—è–≥–∏–≤–∞—é—Ç—Å—è! –í–∞—à–∏ —Ä–∞–∑–ª–∏—á–∏—è –¥–µ–ª–∞—é—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è —è—Ä–∫–∏–º–∏ –∏ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º–∏."

    def _generate_advice_text(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç (–∑–∞–≥–ª—É—à–∫–∞)."""
        advices = [
            "–°–µ–≥–æ–¥–Ω—è –∑–≤—ë–∑–¥—ã —Å–æ–≤–µ—Ç—É—é—Ç –ø—Ä–∏—Å–ª—É—à–∞—Ç—å—Å—è –∫ —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ –Ω–µ –±–æ—è—Ç—å—Å—è –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.",
            "–õ—É–Ω–∞ –≤ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–π —Ñ–∞–∑–µ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –∏ —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –¥—Ä—É–∂–µ—Å–∫–∏—Ö —Å–≤—è–∑–µ–π.",
            "–ü–ª–∞–Ω–µ—Ç—ã —Å–æ–≤–µ—Ç—É—é—Ç —É–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é –∏ –∏–∑—É—á–µ–Ω–∏—é —á–µ–≥–æ-—Ç–æ –Ω–æ–≤–æ–≥–æ.",
            "–û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ –≤–æ–ø–ª–æ—â–µ–Ω–∏—è –≤ –∂–∏–∑–Ω—å –≤–∞—à–∏—Ö –∏–¥–µ–π.",
        ]
        
        import random
        return random.choice(advices)