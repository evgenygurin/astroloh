"""
AI-powered —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Yandex GPT.
"""

import logging
from datetime import date, datetime
from typing import Any, Dict, Optional

from app.core.config import settings
from app.models.yandex_models import YandexZodiacSign
from app.services.horoscope_generator import HoroscopeGenerator, HoroscopePeriod
from app.services.yandex_gpt import yandex_gpt_client


logger = logging.getLogger(__name__)


class AIHoroscopeService:
    """AI-powered —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤."""

    def __init__(self):
        self.traditional_generator = HoroscopeGenerator()
        self.gpt_client = yandex_gpt_client

    async def generate_enhanced_horoscope(
        self,
        zodiac_sign: YandexZodiacSign,
        birth_date: Optional[date] = None,
        birth_time: Optional[datetime] = None,
        period: HoroscopePeriod = HoroscopePeriod.DAILY,
        target_date: Optional[datetime] = None,
        forecast_date: Optional[date] = None,
        use_ai: bool = True,
    ) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI.

        Args:
            zodiac_sign: –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
            birth_date: –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
            birth_time: –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è
            period: –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞
            target_date: –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞
            use_ai: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—é

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞
        """
        if target_date is None:
            target_date = datetime.now()
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –≤–º–µ—Å—Ç–æ target_date
        if forecast_date is not None:
            target_date = datetime.combine(forecast_date, datetime.min.time())

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        base_horoscope = self.traditional_generator.generate_personalized_horoscope(
            zodiac_sign=zodiac_sign,
            birth_date=birth_date,
            birth_time=birth_time,
            period=period,
            target_date=target_date,
        )

        # –ï—Å–ª–∏ AI –≤–∫–ª—é—á–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        logger.error(f"üîç DEBUG: AI check - use_ai={use_ai}, enabled={settings.ENABLE_AI_GENERATION}")
        print(f"üîç DEBUG: AI check - use_ai={use_ai}, enabled={settings.ENABLE_AI_GENERATION}")
        if use_ai and settings.ENABLE_AI_GENERATION:
            logger.info(f"AI_HOROSCOPE_GENERATION_START: sign={zodiac_sign}, period={period}")
            print(f"üîç DEBUG: About to call _generate_ai_content")
            try:
                ai_enhanced = await self._generate_ai_content(
                    zodiac_sign=zodiac_sign,
                    period=period,
                    birth_date=birth_date,
                    base_data=base_horoscope,
                    forecast_date=forecast_date,
                )

                print(f"üîç DEBUG: AI enhanced result: {ai_enhanced is not None}")
                if ai_enhanced:
                    logger.info(f"AI_HOROSCOPE_SUCCESS: Enhanced horoscope generated")
                    print(f"‚úÖ DEBUG: Returning AI enhanced horoscope")
                    # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å AI –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
                    return self._merge_horoscope_data(base_horoscope, ai_enhanced)
                else:
                    logger.warning(f"AI_HOROSCOPE_EMPTY: AI returned empty result")
                    print(f"‚ö†Ô∏è DEBUG: AI returned None, falling back")

            except Exception as e:
                logger.error(f"AI_HOROSCOPE_ERROR: {e}", exc_info=True)
                print(f"‚ùå DEBUG: AI exception: {e}")
        else:
            logger.info(f"AI_HOROSCOPE_DISABLED: use_ai={use_ai}, enabled={settings.ENABLE_AI_GENERATION}")
            print(f"üö´ DEBUG: AI disabled, using traditional")

        # Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø
        print(f"üîÑ DEBUG: Using traditional fallback")
        return self._enhance_traditional_horoscope(base_horoscope)

    async def _generate_ai_content(
        self,
        zodiac_sign: YandexZodiacSign,
        period: HoroscopePeriod,
        birth_date: Optional[date],
        base_data: Dict[str, Any],
        forecast_date: Optional[date] = None,
    ) -> Optional[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç AI –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞."""

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
        context = {
            "moon_phase": base_data.get("astrological_influences", {})
            .get("moon_phase", {})
            .get("phase_name"),
            "season": base_data.get("astrological_influences", {})
            .get("season_influence", {})
            .get("season"),
            "energy_level": base_data.get("energy_level", {}).get("level", 60),
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ—Å–∫–æ–ø
        logger.info(f"AI_GENERATE_CONTENT_START: Calling Yandex GPT for {zodiac_sign.value}")
        logger.error(f"üî• FORCE: About to call gpt_client.generate_horoscope")
        print(f"üî• DEBUG: Calling generate_horoscope with context: {context}")
        ai_horoscope = await self.gpt_client.generate_horoscope(
            zodiac_sign=zodiac_sign.value,
            period=period.value,
            birth_date=birth_date.isoformat() if birth_date else None,
            forecast_date=forecast_date.strftime("%d %B %Y") if forecast_date else None,
            additional_context=context,
        )
        logger.error(f"üî• FORCE: generate_horoscope returned: {ai_horoscope is not None}")
        print(f"üî• DEBUG: AI horoscope result: {ai_horoscope[:100] if ai_horoscope else 'None'}")

        if not ai_horoscope:
            logger.warning(f"AI_GENERATE_CONTENT_FAILED: Yandex GPT returned None for {zodiac_sign.value}")
            return None

        return {
            "ai_generated": True,
            "general_forecast": ai_horoscope,
            "prediction": ai_horoscope,  # For backward compatibility
            "generation_method": "hybrid",
        }

    def _merge_horoscope_data(
        self, base_data: Dict[str, Any], ai_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏ AI –¥–∞–Ω–Ω—ã–µ."""

        merged = base_data.copy()

        # –ó–∞–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ AI –≤–µ—Ä—Å–∏—é
        if "general_forecast" in ai_data:
            merged["general_forecast"] = ai_data["general_forecast"]
            merged["prediction"] = ai_data["general_forecast"]

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ AI
        merged.update({
            "ai_enhanced": True,
            "ai_generated": ai_data.get("ai_generated", True),
            "generation_method": ai_data.get("generation_method", "hybrid"),
            "ai_confidence": "high",
        })

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ–ª–µ
        merged["traditional_data"] = {
            "spheres": base_data.get("spheres", {}),
            "energy_level": base_data.get("energy_level", {}),
            "lucky_numbers": base_data.get("lucky_numbers", []),
            "lucky_colors": base_data.get("lucky_colors", []),
            "astrological_influences": base_data.get("astrological_influences", {}),
        }

        return merged

    def _enhance_traditional_horoscope(
        self, base_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """–£–ª—É—á—à–∞–µ—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –±–µ–∑ AI."""

        enhanced = base_data.copy()
        enhanced.update({
            "ai_enhanced": False,
            "generation_method": "traditional",
            "fallback_reason": "ai_unavailable",
        })

        return enhanced

    async def generate_compatibility_analysis(
        self,
        sign1: YandexZodiacSign,
        sign2: YandexZodiacSign,
        context: Optional[Dict[str, Any]] = None,
        use_ai: bool = True,
    ) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI.

        Args:
            sign1: –ü–µ—Ä–≤—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
            sign2: –í—Ç–æ—Ä–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            use_ai: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ AI

        Returns:
            –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        """
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        traditional_compatibility = self._get_traditional_compatibility(sign1, sign2)

        if use_ai and settings.ENABLE_AI_GENERATION:
            try:
                ai_analysis = await self.gpt_client.generate_compatibility_analysis(
                    sign1=sign1.value, sign2=sign2.value, context=context
                )

                if ai_analysis:
                    return {
                        "signs": [sign1.value, sign2.value],
                        "analysis": ai_analysis,
                        "traditional_score": traditional_compatibility["score"],
                        "ai_enhanced": True,
                        "generation_method": "yandex_gpt",
                    }

            except Exception as e:
                logger.error(f"AI compatibility analysis failed: {e}")

        # Fallback –∫ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É
        return {
            "signs": [sign1.value, sign2.value],
            "analysis": traditional_compatibility["description"],
            "score": traditional_compatibility["score"],
            "ai_enhanced": False,
            "generation_method": "traditional",
        }

    def _get_traditional_compatibility(
        self, sign1: YandexZodiacSign, sign2: YandexZodiacSign
    ) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º astrology calculator –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ —Å–∫–æ—Ä–∞
        from app.services.astrology_calculator import AstrologyCalculator

        calc = AstrologyCalculator()

        compatibility_score = calc.calculate_compatibility_score(sign1, sign2)

        return {
            "score": compatibility_score.get("total_score", 70),
            "description": compatibility_score.get(
                "description", "–£–º–µ—Ä–µ–Ω–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"
            ),
        }

    async def generate_personalized_advice(
        self,
        zodiac_sign: YandexZodiacSign,
        topic: Optional[str] = None,
        user_context: Optional[Dict[str, Any]] = None,
        use_ai: bool = True,
    ) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–æ–≤–µ—Ç.

        Args:
            zodiac_sign: –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
            topic: –¢–µ–º–∞ —Å–æ–≤–µ—Ç–∞
            user_context: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            use_ai: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ AI

        Returns:
            –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–æ–≤–µ—Ç
        """
        if use_ai and settings.ENABLE_AI_GENERATION:
            try:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
                ai_context = {}
                if user_context:
                    if "mood" in user_context:
                        ai_context["mood"] = user_context["mood"]
                    if "recent_challenges" in user_context:
                        ai_context["current_challenges"] = user_context[
                            "recent_challenges"
                        ]

                ai_advice = await self.gpt_client.generate_advice(
                    zodiac_sign=zodiac_sign.value, topic=topic, context=ai_context
                )

                if ai_advice:
                    return {
                        "zodiac_sign": zodiac_sign.value,
                        "topic": topic or "–æ–±—â–∏–π",
                        "advice": ai_advice,
                        "ai_enhanced": True,
                        "generation_method": "yandex_gpt",
                    }

            except Exception as e:
                logger.error(f"AI advice generation failed: {e}")

        # Fallback –∫ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–º—É —Å–æ–≤–µ—Ç—É
        traditional_advice = self._generate_traditional_advice(zodiac_sign, topic)

        return {
            "zodiac_sign": zodiac_sign.value,
            "topic": topic or "–æ–±—â–∏–π",
            "advice": traditional_advice,
            "ai_enhanced": False,
            "generation_method": "traditional",
        }

    def _generate_traditional_advice(
        self, zodiac_sign: YandexZodiacSign, topic: Optional[str]
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç."""

        # –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑–Ω–∞–∫–∞
        sign_data = self.traditional_generator.sign_characteristics.get(zodiac_sign, {})
        keywords = sign_data.get("keywords", ["–≥–∞—Ä–º–æ–Ω–∏—è", "—Ä–∞–∑–≤–∏—Ç–∏–µ"])

        import random

        keyword = random.choice(keywords)

        if topic == "–ª—é–±–æ–≤—å":
            return f"–í –ª—é–±–æ–≤–Ω—ã—Ö –¥–µ–ª–∞—Ö –ø—Ä–æ—è–≤–∏—Ç–µ –≤–∞—à—É –ø—Ä–∏—Ä–æ–¥–Ω—É—é {keyword}. –ó–≤–µ–∑–¥—ã –±–ª–∞–≥–æ–≤–æ–ª—è—Ç –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç–∏."
        elif topic == "–∫–∞—Ä—å–µ—Ä–∞":
            return f"–í –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ñ–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à—É {keyword}. –í—Ä–µ–º—è –¥–ª—è –Ω–æ–≤—ã—Ö –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤."
        elif topic == "–∑–¥–æ—Ä–æ–≤—å–µ":
            return f"–î–ª—è –∑–¥–æ—Ä–æ–≤—å—è –≤–∞–∂–Ω–∞ –≤–∞—à–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ {keyword}. –°–ª—É—à–∞–π—Ç–µ —Å–∏–≥–Ω–∞–ª—ã —Ç–µ–ª–∞."
        else:
            return (
                f"–°–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –ø—Ä–æ—è–≤–∏—Ç—å –≤–∞—à—É {keyword}. –î–æ–≤–µ—Ä—å—Ç–µ—Å—å –∏–Ω—Ç—É–∏—Ü–∏–∏."
            )

    async def check_ai_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI —Å–µ—Ä–≤–∏—Å–æ–≤."""
        try:
            return await self.gpt_client.is_available()
        except Exception as e:
            logger.error(f"AI availability check failed: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
ai_horoscope_service = AIHoroscopeService()
