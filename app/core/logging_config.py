"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Astroloh.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∏ –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å.
"""

import logging
import logging.handlers
from pathlib import Path

from app.core.config import settings


def setup_logging() -> None:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    –°–æ–∑–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã:
    - –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å —Ü–≤–µ—Ç–Ω–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
    - –§–∞–π–ª–æ–≤—ã–π –≤—ã–≤–æ–¥ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
    """
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    log_file_path = Path(settings.LOG_FILE_PATH)
    log_file_path.parent.mkdir(parents=True, exist_ok=True)

    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_level = getattr(logging, settings.LOG_LEVEL.upper(), logging.INFO)

    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã
    console_formatter = logging.Formatter(
        fmt="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S",
    )

    file_formatter = logging.Formatter(
        fmt="%(asctime)s - %(name)s - %(levelname)s - %(filename)s:%(lineno)d - %(funcName)s - %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S",
    )

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
    root_logger = logging.getLogger()
    root_logger.setLevel(log_level)

    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)

    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä
    console_handler = logging.StreamHandler()
    console_handler.setLevel(log_level)
    console_handler.setFormatter(console_formatter)
    root_logger.addHandler(console_handler)

    # –§–∞–π–ª–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä —Å —Ä–æ—Ç–∞—Ü–∏–µ–π (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    if settings.LOG_TO_FILE:
        file_handler = logging.handlers.RotatingFileHandler(
            filename=settings.LOG_FILE_PATH,
            maxBytes=settings.LOG_MAX_SIZE
            * 1024
            * 1024,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º MB –≤ –±–∞–π—Ç—ã
            backupCount=settings.LOG_BACKUP_COUNT,
            encoding="utf-8",
        )
        file_handler.setLevel(log_level)
        file_handler.setFormatter(file_formatter)
        root_logger.addHandler(file_handler)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app_loggers = [
        "app",
        "app.api",
        "app.api.yandex_dialogs",
        "app.services",
        "app.services.dialog_handler",
        "app.services.ai_horoscope_service",
        "app.services.conversation_manager",
        "app.core",
        "uvicorn.access",
        "uvicorn.error",
    ]

    for logger_name in app_loggers:
        logger = logging.getLogger(logger_name)
        logger.setLevel(log_level)
        # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã - –æ–Ω–∏ –Ω–∞—Å–ª–µ–¥—É—é—Ç—Å—è –æ—Ç –∫–æ—Ä–Ω–µ–≤–æ–≥–æ
        logger.propagate = True

    # –£–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    external_loggers = {
        "httpx": logging.WARNING,
        "urllib3": logging.WARNING,
        "requests": logging.WARNING,
        "asyncio": logging.WARNING,
        "slowapi": logging.WARNING,
        "fastapi": logging.INFO,
    }

    for logger_name, level in external_loggers.items():
        logging.getLogger(logger_name).setLevel(level)


def get_logger(name: str) -> logging.Logger:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–≥–µ—Ä —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º.

    Args:
        name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞

    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    """
    return logging.getLogger(name)


def log_startup_info() -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger = get_logger(__name__)

    logger.info("üöÄ ASTROLOH STARTUP")
    logger.info(f"Log level: {settings.LOG_LEVEL}")
    logger.info(f"Log to file: {settings.LOG_TO_FILE}")

    if settings.LOG_TO_FILE:
        logger.info(f"Log file: {settings.LOG_FILE_PATH}")
        logger.info(
            f"Log rotation: {settings.LOG_MAX_SIZE}MB, {settings.LOG_BACKUP_COUNT} backups"
        )

    logger.info(f"Debug mode: {settings.DEBUG}")
    logger.info("Logging configuration applied successfully")


def log_request_info(
    method: str,
    url: str,
    status_code: int,
    process_time: float,
    user_id: str = None,
) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ HTTP –∑–∞–ø—Ä–æ—Å–µ.

    Args:
        method: HTTP –º–µ—Ç–æ–¥
        url: URL –∑–∞–ø—Ä–æ—Å–∞
        status_code: –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞
        process_time: –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    logger = get_logger("app.api.requests")

    user_info = f" user_id={user_id}" if user_id else ""
    logger.info(
        f"{method} {url} - {status_code} - {process_time:.3f}s{user_info}"
    )


def log_ai_operation(
    operation: str,
    zodiac_sign: str = None,
    success: bool = True,
    duration: float = None,
    error: str = None,
) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç AI –æ–ø–µ—Ä–∞—Ü–∏–∏.

    Args:
        operation: –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (horoscope, compatibility, advice)
        zodiac_sign: –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
        success: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        error: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    """
    logger = get_logger("app.services.ai")

    status = "SUCCESS" if success else "FAILED"
    sign_info = f" sign={zodiac_sign}" if zodiac_sign else ""
    duration_info = f" duration={duration:.3f}s" if duration else ""
    error_info = f" error={error}" if error else ""

    logger.info(
        f"AI_{operation.upper()}_{status}{sign_info}{duration_info}{error_info}"
    )


def log_dialog_flow(
    user_id: str,
    session_id: str,
    intent: str,
    confidence: float,
    dialog_state: str = None,
    processing_time: float = None,
) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏.

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session_id: ID —Å–µ—Å—Å–∏–∏
        intent: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ–Ω—Ç
        confidence: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        dialog_state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        processing_time: –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    logger = get_logger("app.services.dialog")

    state_info = f" state={dialog_state}" if dialog_state else ""
    time_info = f" time={processing_time:.3f}s" if processing_time else ""

    logger.info(
        f"DIALOG user_id={user_id} session_id={session_id} "
        f"intent={intent} confidence={confidence:.2f}{state_info}{time_info}"
    )
