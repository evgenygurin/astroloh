# ==============================================================================
# Makefile for NGDB Classifier
#
# –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Makefile —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ Ruff.
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Ruff –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
# ==============================================================================

# ------------------------------------------------------------------------------
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ------------------------------------------------------------------------------

.DEFAULT_GOAL := help

# –ò—Å–ø–æ–ª—å–∑—É–µ–º uv –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º –∏ –ø–∞–∫–µ—Ç–∞–º–∏
UV := uv
PYTHON_VERSION := 3.12

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º
PYTHON_DIRS := app tests

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
RUFF := $(UV) run --python $(PYTHON_VERSION) ruff
MYPY := $(UV) run --python $(PYTHON_VERSION) mypy $(PYTHON_DIRS)
PYTEST := $(UV) run --python $(PYTHON_VERSION) pytest

# –¶–≤–µ—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –≤—ã–≤–æ–¥–∞
GREEN := \033[0;32m
YELLOW := \033[0;33m
BLUE := \033[0;34m
RED := \033[0;31m
RESET := \033[0m

# ------------------------------------------------------------------------------
# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
# ------------------------------------------------------------------------------

.PHONY: help setup dev clean lint format fix test coverage check-strict security check-env validate
.PHONY: quick-start dev-setup ci-check prod-ready debug restart full-check quick-fix

help:
	@echo "‚úÖ $(GREEN)NGDB Classifier - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Makefile —Å Ruff$(RESET)"
	@echo "-------------------------------------------------------------------"
	@echo "  $(YELLOW)üöÄ –°–±–æ—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (workflows):$(RESET)"
	@echo "    make quick-start - –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç: setup + dev + run"
	@echo "    make dev-setup   - –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
	@echo "    make ci-check    - –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è CI/CD (lint + test + security)"
	@echo "    make prod-ready  - –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ production"
	@echo "    make restart     - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: kill + clean + run"
	@echo "    make quick-fix   - –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: fix + test"
	@echo "    make full-check  - –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"
	@echo ""
	@echo "  $(YELLOW)–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã:$(RESET)"
	@echo "    make setup      - –ü–æ–ª–Ω–∞—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"
	@echo "    make fix        - ‚ú® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ + —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
	@echo "    make lint       - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"
	@echo "    make test       - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º"
	@echo "    make test-v     - –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–µ—Å—Ç–æ–≤"
	@echo "    make run        - –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
	@echo "    make kill       - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É 8000"
	@echo ""
	@echo "  $(YELLOW)–ö–æ–º–∞–Ω–¥—ã –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞:$(RESET)"
	@echo "    make format     - –¢–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞"
	@echo "    make check      - –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"
	@echo "    make check-strict - –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è CI/CD"
	@echo "    make stats      - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
	@echo ""
	@echo "  $(YELLOW)–ö–æ–º–∞–Ω–¥—ã Ruff:$(RESET)"
	@echo "    make ruff-docs  - –ü—Ä–æ–≤–µ—Ä–∫–∞ docstrings"
	@echo "    make ruff-format - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å Ruff"
	@echo "    make ruff-format-check - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
	@echo ""
	@echo "  $(YELLOW)–û—Ç—á–µ—Ç—ã –¥–ª—è CI/CD:$(RESET)"
	@echo "    make report-json   - –û—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"
	@echo "    make report-github - –û—Ç—á–µ—Ç –¥–ª—è GitHub Actions"
	@echo "    make report-sarif  - –û—Ç—á–µ—Ç SARIF –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
	@echo ""
	@echo "  $(YELLOW)–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:$(RESET)"
	@echo "    make security   - –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
	@echo "    make bandit     - –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞"
	@echo "    make safety     - –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
	@echo ""
	@echo "  $(YELLOW)–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:$(RESET)"
	@echo "    make hooks      - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ pre-commit —Ö—É–∫–æ–≤"
	@echo "    make pre-commit - –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö pre-commit –ø—Ä–æ–≤–µ—Ä–æ–∫"
	@echo "    make clean      - –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
	@echo "    make coverage   - –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Ç–µ—Å—Ç–∞–º–∏"
	@echo "    make check-env  - –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
	@echo "    make validate   - –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞"
	@echo "    make debug      - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –æ—Ç–ª–∞–¥–∫–∞"
	@echo ""
	@echo "  $(YELLOW)Docker –∫–æ–º–∞–Ω–¥—ã:$(RESET)"
	@echo "    make docker-dev    - üîß –ó–∞–ø—É—Å–∫ development –æ–∫—Ä—É–∂–µ–Ω–∏—è (hot reload)"
	@echo "    make docker-prod   - üè≠ –ó–∞–ø—É—Å–∫ production –æ–∫—Ä—É–∂–µ–Ω–∏—è"
	@echo "    make docker-up     - –ó–∞–ø—É—Å–∫ production —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo "    make docker-down   - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö Docker —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo "    make docker-build  - –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤"
	@echo "    make docker-rebuild - –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –±–µ–∑ –∫—ç—à–∞"
	@echo "    make docker-logs   - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo "-------------------------------------------------------------------"

# ------------------------------------------------------------------------------
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
# ------------------------------------------------------------------------------

setup:
	@echo "$(BLUE)üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(RESET)"
	@if ! command -v uv >/dev/null 2>&1; then \
		echo "$(YELLOW)‚ö†Ô∏è  uv –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ uv: https://docs.astral.sh/uv/getting-started/installation/$(RESET)"; \
		exit 1; \
	fi
	@$(UV) sync --dev
	@$(UV) run --python $(PYTHON_VERSION) pre-commit install
	@echo "$(GREEN)‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'make lint' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏$(RESET)"

install:
	@echo "$(BLUE)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(RESET)"
	@$(UV) sync --no-dev

dev:
	@echo "$(BLUE)üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(RESET)"
	@$(UV) sync --dev

hooks:
	@echo "$(BLUE)ü™ù –£—Å—Ç–∞–Ω–æ–≤–∫–∞ pre-commit —Ö—É–∫–æ–≤...$(RESET)"
	@$(UV) run --python $(PYTHON_VERSION) pre-commit install
	@echo "$(GREEN)‚úÖ Pre-commit —Ö—É–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã$(RESET)"

clean:
	@echo "$(BLUE)üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...$(RESET)"
	@find . -type f -name '*.py[cod]' -delete 2>/dev/null || true
	@find . -type d -name '__pycache__' -exec rm -rf {} + 2>/dev/null || true
	@find . -type d -name '*.egg-info' -exec rm -rf {} + 2>/dev/null || true
	@rm -rf build/ dist/ .coverage htmlcov/ .pytest_cache/ .ruff_cache/ .mypy_cache/ 2>/dev/null || true
	@echo "$(GREEN)‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(RESET)"

check-env:
	@echo "$(BLUE)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(RESET)"
	@command -v uv >/dev/null 2>&1 || (echo "$(RED)‚ùå uv –Ω–µ –Ω–∞–π–¥–µ–Ω$(RESET)" && exit 1)
	@echo "$(BLUE)–í–µ—Ä—Å–∏—è uv:$(RESET) $$($(UV) --version)"
	@echo "$(BLUE)–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(RESET)"
	@if $(UV) tree 2>/dev/null | head -10; then \
		echo "$(GREEN)–î–µ—Ä–µ–≤–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ$(RESET)"; \
	elif $(UV) run python -c "import sys; print(f'Python {sys.version}')" 2>/dev/null; then \
		echo "$(GREEN)Python –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ$(RESET)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ$(RESET)"; \
	fi
	@echo "$(GREEN)‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ$(RESET)"

validate:
	@echo "$(BLUE)üéØ –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞...$(RESET)"
	@$(MAKE) check-env
	@$(MAKE) lint
	@$(MAKE) test
	@echo "$(GREEN)‚úÖ –ü—Ä–æ–µ–∫—Ç –≤–∞–ª–∏–¥–µ–Ω$(RESET)"

# ------------------------------------------------------------------------------
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
# ------------------------------------------------------------------------------

.PHONY: lint format fix check check-strict stats report-json report-github report-sarif ruff-docs ruff-format ruff-format-check ruff-json ruff-github ruff-sarif

lint:
	@echo "$(BLUE)üîç –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞...$(RESET)"
	@$(RUFF) check $(PYTHON_DIRS) --preview
	@$(MYPY)
	@echo "$(GREEN)‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(RESET)"

check:
	@echo "$(BLUE)‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...$(RESET)"
	@$(RUFF) check $(PYTHON_DIRS) --no-fix --preview

format:
	@echo "$(BLUE)üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...$(RESET)"
	@$(RUFF) format $(PYTHON_DIRS) --preview
	@echo "$(GREEN)‚úÖ –ö–æ–¥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω$(RESET)"

fix:
	@echo "$(BLUE)üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ + —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...$(RESET)"
	@$(RUFF) check $(PYTHON_DIRS) --fix --preview
	@$(RUFF) format $(PYTHON_DIRS) --preview
	@echo "$(GREEN)‚úÖ –ö–æ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω$(RESET)"

check-strict:
	@echo "$(BLUE)üéØ –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è CI/CD...$(RESET)"
	@$(RUFF) check $(PYTHON_DIRS) --diff --preview
	@$(RUFF) format $(PYTHON_DIRS) --check --diff --preview
	@$(MYPY)

stats:
	@echo "$(BLUE)üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º...$(RESET)"
	@$(RUFF) check $(PYTHON_DIRS) --statistics --preview

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã Ruff (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π)
ruff-docs:
	@echo "$(BLUE)üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ docstrings...$(RESET)"
	@$(RUFF) check $(PYTHON_DIRS) --select=D --preview

ruff-format:
	@echo "$(BLUE)üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å Ruff...$(RESET)"
	@$(RUFF) format $(PYTHON_DIRS) --preview

ruff-format-check:
	@echo "$(BLUE)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...$(RESET)"
	@$(RUFF) format $(PYTHON_DIRS) --check --preview

ruff-json:
	@echo "$(BLUE)üìÑ JSON –æ—Ç—á–µ—Ç Ruff...$(RESET)"
	@$(RUFF) check $(PYTHON_DIRS) --output-format=json --preview

ruff-github:
	@echo "$(BLUE)üêô GitHub –æ—Ç—á–µ—Ç Ruff...$(RESET)"
	@$(RUFF) check $(PYTHON_DIRS) --output-format=github --preview

ruff-sarif:
	@echo "$(BLUE)üîí SARIF –æ—Ç—á–µ—Ç Ruff...$(RESET)"
	@$(RUFF) check $(PYTHON_DIRS) --output-format=sarif --preview

# ------------------------------------------------------------------------------
# –û—Ç—á–µ—Ç—ã –¥–ª—è CI/CD
# ------------------------------------------------------------------------------

report-json:
	@echo "$(BLUE)üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JSON –æ—Ç—á–µ—Ç–∞...$(RESET)"
	@$(RUFF) check $(PYTHON_DIRS) --output-format=json --preview

report-github:
	@echo "$(BLUE)üêô –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è GitHub Actions...$(RESET)"
	@$(RUFF) check $(PYTHON_DIRS) --output-format=github --preview

report-sarif:
	@echo "$(BLUE)üîí –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SARIF –æ—Ç—á–µ—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...$(RESET)"
	@$(RUFF) check $(PYTHON_DIRS) --output-format=sarif --preview

# ------------------------------------------------------------------------------
# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
# ------------------------------------------------------------------------------

.PHONY: security bandit safety

bandit:
	@echo "$(BLUE)üîê –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞...$(RESET)"
	@$(UV) run --python $(PYTHON_VERSION) bandit -r app/ -f json -o bandit-report.json || true
	@$(UV) run --python $(PYTHON_VERSION) bandit -r app/

safety:
	@echo "$(BLUE)üõ°Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(RESET)"
	@$(UV) run --python $(PYTHON_VERSION) safety scan --save-as json safety-report.json || true
	@$(UV) run --python $(PYTHON_VERSION) safety scan

security: bandit safety
	@echo "$(GREEN)‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã$(RESET)"

# ------------------------------------------------------------------------------
# Pre-commit –∏ Git —Ö—É–∫–∏
# ------------------------------------------------------------------------------

.PHONY: pre-commit

pre-commit:
	@echo "$(BLUE)üîÑ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö pre-commit –ø—Ä–æ–≤–µ—Ä–æ–∫...$(RESET)"
	@$(UV) run --python $(PYTHON_VERSION) pre-commit run --all-files

# ------------------------------------------------------------------------------
# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–∫—Ä—ã—Ç–∏–µ
# ------------------------------------------------------------------------------

.PHONY: test test-v coverage

test:
	@echo "$(BLUE)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –±–∞–∑–æ–≤—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º...$(RESET)"
	@$(PYTEST) --cov=$(firstword $(PYTHON_DIRS)) --cov-report=term
	@echo "$(GREEN)‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã$(RESET)"

test-v:
	@echo "$(BLUE)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º...$(RESET)"
	@$(PYTEST) --cov=$(firstword $(PYTHON_DIRS)) --cov-report=term -v
	@echo "$(GREEN)‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã$(RESET)"

coverage:
	@echo "$(BLUE)üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Ç–µ—Å—Ç–∞–º–∏...$(RESET)"
	@$(PYTEST) --cov=$(firstword $(PYTHON_DIRS)) --cov-report=term-missing --cov-report=html --cov-report=json
	@echo "$(GREEN)‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ htmlcov/index.html$(RESET)"

# ------------------------------------------------------------------------------
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ------------------------------------------------------------------------------

.PHONY: run kill docker-up docker-down docker-dev docker-prod docker-logs docker-build docker-rebuild

kill:
	@echo "$(BLUE)üî™ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É 8000...$(RESET)"
	@pkill -f "uvicorn.*8000" 2>/dev/null || true
	@if command -v lsof >/dev/null 2>&1; then \
		PIDS=$$(lsof -ti:8000 2>/dev/null) && \
		if [ -n "$$PIDS" ]; then echo "$$PIDS" | xargs kill -9 2>/dev/null || true; fi; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  lsof –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ pkill$(RESET)"; \
	fi
	@echo "$(GREEN)‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(RESET)"

run:
	@echo "$(BLUE)üöÄ –ó–∞–ø—É—Å–∫ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(RESET)"
	@if [ ! -f .env ]; then echo "$(YELLOW)‚ö†Ô∏è  .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏$(RESET)"; fi
	@if [ -f .env ]; then \
		set -a && . ./.env && set +a && \
		$(UV) run uvicorn app.main:app --host $${API_HOST:-0.0.0.0} --port $${API_PORT:-8000} --reload; \
	else \
		$(UV) run uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload; \
	fi

# ------------------------------------------------------------------------------
# Docker –∫–æ–º–∞–Ω–¥—ã
# ------------------------------------------------------------------------------

docker-build:
	@echo "$(BLUE)üèóÔ∏è  –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤...$(RESET)"
	@docker-compose build
	@echo "$(GREEN)‚úÖ –û–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã$(RESET)"

docker-rebuild:
	@echo "$(BLUE)üîÑ –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤ –±–µ–∑ –∫—ç—à–∞...$(RESET)"
	@docker-compose build --no-cache
	@echo "$(GREEN)‚úÖ –û–±—Ä–∞–∑—ã –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω—ã$(RESET)"

docker-up:
	@echo "$(BLUE)üöÄ –ó–∞–ø—É—Å–∫ production –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Docker...$(RESET)"
	@docker-compose up -d
	@echo "$(GREEN)‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã:$(RESET)"
	@echo "  - Frontend: http://localhost"
	@echo "  - Backend API: http://localhost:8000"
	@echo "  - API Docs: http://localhost:8000/docs"
	@docker-compose ps

docker-dev:
	@echo "$(BLUE)üîß –ó–∞–ø—É—Å–∫ development –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Docker...$(RESET)"
	@docker-compose -f docker-compose.dev.yml up
	@echo "$(GREEN)‚úÖ Development —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã:$(RESET)"
	@echo "  - Frontend (hot reload): http://localhost:3000"
	@echo "  - Backend API: http://localhost:8000"
	@echo "  - API Docs: http://localhost:8000/docs"

docker-down:
	@echo "$(BLUE)‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤...$(RESET)"
	@docker-compose down
	@docker-compose -f docker-compose.dev.yml down 2>/dev/null || true
	@echo "$(GREEN)‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(RESET)"

docker-logs:
	@echo "$(BLUE)üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ Docker —Å–µ—Ä–≤–∏—Å–æ–≤...$(RESET)"
	@docker-compose logs -f

docker-prod:
	@echo "$(BLUE)üè≠ –ó–∞–ø—É—Å–∫ production –æ–∫—Ä—É–∂–µ–Ω–∏—è...$(RESET)"
	@$(MAKE) docker-build
	@$(MAKE) docker-up

# ==============================================================================
# –°–±–æ—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö workflow —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
# ==============================================================================

.PHONY: quick-start dev-setup ci-check prod-ready debug restart full-check quick-fix

quick-start:
	@echo "$(BLUE)üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(RESET)"
	@$(MAKE) setup
	@$(MAKE) dev
	@$(MAKE) run

dev-setup:
	@echo "$(BLUE)üîß –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(RESET)"
	@$(MAKE) setup
	@$(MAKE) dev
	@$(MAKE) hooks
	@$(MAKE) check-env
	@echo "$(GREEN)‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≥–æ—Ç–æ–≤–æ!$(RESET)"

ci-check:
	@echo "$(BLUE)üéØ –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è CI/CD...$(RESET)"
	@$(MAKE) check-strict
	@$(MAKE) test
	@$(MAKE) security
	@echo "$(GREEN)‚úÖ CI/CD –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã$(RESET)"

prod-ready:
	@echo "$(BLUE)üè≠ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ production...$(RESET)"
	@$(MAKE) install
	@$(MAKE) ci-check
	@$(MAKE) coverage
	@echo "$(GREEN)‚úÖ –ì–æ—Ç–æ–≤ –∫ production deployment$(RESET)"

restart:
	@echo "$(BLUE)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...$(RESET)"
	@$(MAKE) kill
	@$(MAKE) clean
	@$(MAKE) run

quick-fix:
	@echo "$(BLUE)‚ö° –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞...$(RESET)"
	@$(MAKE) fix
	@$(MAKE) test
	@echo "$(GREEN)‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã$(RESET)"

full-check:
	@echo "$(BLUE)üîç –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...$(RESET)"
	@$(MAKE) check-env
	@$(MAKE) lint
	@$(MAKE) test-v
	@$(MAKE) security
	@$(MAKE) coverage
	@echo "$(GREEN)‚úÖ –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(RESET)"

debug:
	@echo "$(BLUE)üêõ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –æ—Ç–ª–∞–¥–∫–∞...$(RESET)"
	@echo "$(YELLOW)=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ ====$(RESET)"
	@$(UV) --version || echo "$(RED)uv –Ω–µ –Ω–∞–π–¥–µ–Ω$(RESET)"
	@$(UV) run python --version || python --version || echo "$(RED)Python –Ω–µ –Ω–∞–π–¥–µ–Ω$(RESET)"
	@echo "$(YELLOW)=== –°—Ç–∞—Ç—É—Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è ====$(RESET)"
	@if $(UV) tree 2>/dev/null | head -10; then \
		echo "$(GREEN)–î–µ—Ä–µ–≤–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∞–∫—Ç–∏–≤–Ω–æ$(RESET)"; \
	elif $(UV) run python -c "import sys; print('–ü–∞–∫–µ—Ç—ã:'); import pkg_resources; [print(f'  {d.project_name}=={d.version}') for d in sorted(pkg_resources.working_set, key=lambda x: x.project_name)[:10]]" 2>/dev/null; then \
		echo "$(GREEN)–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã$(RESET)"; \
	else \
		echo "$(RED)–û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ$(RESET)"; \
	fi
	@echo "$(YELLOW)=== –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É 8000 ====$(RESET)"
	@if command -v lsof >/dev/null 2>&1; then \
		lsof -i :8000 || echo "$(GREEN)–ü–æ—Ä—Ç 8000 —Å–≤–æ–±–æ–¥–µ–Ω$(RESET)"; \
	else \
		echo "$(YELLOW)lsof –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–æ–≤$(RESET)"; \
	fi
	@echo "$(YELLOW)=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ====$(RESET)"
	@[ -f .env ] && echo "$(GREEN).env –Ω–∞–π–¥–µ–Ω$(RESET)" || echo "$(YELLOW).env –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç$(RESET)"
	@[ -f pyproject.toml ] && echo "$(GREEN)pyproject.toml –Ω–∞–π–¥–µ–Ω$(RESET)" || echo "$(RED)pyproject.toml –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç$(RESET)"
	@[ -f uv.lock ] && echo "$(GREEN)uv.lock –Ω–∞–π–¥–µ–Ω$(RESET)" || echo "$(YELLOW)uv.lock –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç$(RESET)"
	@echo "$(GREEN)‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(RESET)"
