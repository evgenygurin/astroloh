name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: astroloh_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/astroloh_test" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-github-actions-32-chars" >> $GITHUB_ENV
        echo "ENCRYPTION_KEY=test-encryption-key-for-github-actions-32" >> $GITHUB_ENV
        echo "ENVIRONMENT=testing" >> $GITHUB_ENV
    
    - name: Run database migrations
      run: |
        alembic upgrade head
    
    - name: Run linting
      run: |
        # Check code formatting
        black --check app/ tests/
        
        # Check import sorting
        isort --check-only app/ tests/
        
        # Run flake8 for style and error checking
        flake8 app/ tests/
        
        # Run mypy for type checking
        mypy app/
    
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Archive coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/
    
    - name: Run security checks
      run: |
        # Install security tools
        pip install bandit safety
        
        # Run bandit for security issues
        bandit -r app/ -f json -o bandit-report.json || true
        
        # Check for known security vulnerabilities
        safety check --json --output safety-report.json || true
    
    - name: Archive security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: astroloh_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/astroloh_test" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-github-actions-32-chars" >> $GITHUB_ENV
        echo "ENCRYPTION_KEY=test-encryption-key-for-github-actions-32" >> $GITHUB_ENV
        echo "ENVIRONMENT=testing" >> $GITHUB_ENV
    
    - name: Run database migrations
      run: |
        alembic upgrade head
    
    - name: Run performance tests
      run: |
        pytest tests/test_performance.py -v --tb=short
    
    - name: Generate performance report
      run: |
        echo "Performance test completed. Check logs for timing results." > performance-report.txt
    
    - name: Archive performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance-report.txt